name: CD Azure Event Trigger

on:
  push:
    paths:
    - '.github/workflows/cd-azure-event-trigger.yml'
    - 'event_trigger/**'
    branches: [master]
  workflow_dispatch:
    inputs:
      stack:
        description: 'Stack'
        required: false
        default: 'prod'
    paths:
    - '.github/workflows/cd-azure-event-trigger.yml'
    - 'event_trigger/**'
    branches: [master]

env:
  pulumi_version: '2.4.0'
  pulumi_azure_plugin_version: 'v3.6.1'
  pulumi_azure_ad_plugin_version: 'v2.2.1'
  pulumi_stack_prod_name: sre-deadletter-watcher-prod
  pulumi_stack_dev_name: sre-deadletter-watcher-dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout üõéÔ∏è
      uses: actions/checkout@v2

    - name: Set up Python üêç
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'


    - name: Install Python Dependencies üêç
      run: |
        python -m pip install --upgrade pip pipenv


    - name: Install Pulumi
      run: |
        cd ./event_trigger/
        curl -fsSL https://get.pulumi.com | sh -s -- --version $pulumi_version
        echo "Done CURL"
        echo "/home/runner/.pulumi/bin" >> $GITHUB_PATH

    - uses: azure/login@v1.1
      with:
        creds: ${{ secrets.DL_AZURE_CREDS }}


    - name: Set Env Vars to Login to Pulumi
      run: |
        export TMP_AZURE_STORAGE_KEY=`az storage account keys list --account-name "${{ secrets.AZURE_PULUMI_STORAGE_ACCOUNT_NAME}}"  --resource-group "rg-pulumi-shared" --subscription "${{ secrets.PULUMI_STORAGE_SUBS_NAME }}" --query "[0].value" | tr -d \ | sed -r 's/^"|"$//g'`
        echo "AZURE_STORAGE_KEY=$TMP_AZURE_STORAGE_KEY" >> $GITHUB_ENV
        echo "AZURE_STORAGE_ACCOUNT=${{ secrets.AZURE_PULUMI_STORAGE_ACCOUNT_NAME}}" >> $GITHUB_ENV

    - name: Log into Pulumi Backend
      run: |
        pulumi login --cloud-url azblob://pulumi

    - if: ${{ github.event.inputs.stack == 'dev'}}
      name: Populate subscription id for dev stack
      run: |
        echo "Populate subscription id for dev stack"
        echo "ARM_SUBSCRIPTION_ID=${{ secrets.ENTERPRISE_DEV_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

    - if: ${{ github.event.inputs.stack != 'dev'}}
      name: Populate subscription id for prod stack
      run: |
        echo "Populate subscription id for prod stack"
        echo "ARM_SUBSCRIPTION_ID=${{ secrets.FILETRUST_CLOUD_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

    - name: Populate Env Vars with Azure Credentials ‚òÅÔ∏è
      run: |
        echo "AZURE_CLIENT_ID=${{ secrets.PULUMI_AZURE_CLIENT_ID }}" >> $GITHUB_ENV
        echo "AZURE_CLIENT_SECRET=${{ secrets.PULUMI_AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
        echo "AZURE_TENANT_ID=${{ secrets.PULUMI_AZURE_TENANT_ID }}" >> $GITHUB_ENV
        echo "ARM_CLIENT_ID=${{ secrets.PULUMI_AZURE_CLIENT_ID }}" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=${{ secrets.PULUMI_AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ secrets.PULUMI_AZURE_TENANT_ID }}" >> $GITHUB_ENV

    - name: Install Pulumi Azure Plugins
      run: |
        pulumi plugin install resource azure $pulumi_azure_plugin_version
        pulumi plugin install resource azuread $pulumi_azure_ad_plugin_version


    - name: Configure AWS Credentials ‚òÅÔ∏è
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.DEADLETTER_WATCHER_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.DEADLETTER_WATCHER_AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    - if: ${{ github.event.inputs.stack == 'dev'}}
      name: Run pulumi up for dev
      run: |
        export sbList=`az servicebus namespace list --query "[?tags.group=='FileTrust'].{namespace: name, resourceGroup: resourceGroup, area: tags.area}"`
        cd ./event_trigger/
        export PULUMI_SECRET_KEY=${{ secrets.PULUMI_SECRET_KEY }}
        pipenv install
        pulumi login --cloud-url azblob://pulumi
        pulumi config set cluster dev --non-interactive --stack $pulumi_stack_dev_name
        pulumi config set SB_LIST "$sbList" --non-interactive --stack $pulumi_stack_dev_name
        pipenv run pulumi up --non-interactive --yes --stack $pulumi_stack_dev_name

    - if: ${{ github.event.inputs.stack != 'dev'}}
      name: Run pulumi up for prod
      run: |
        export sbList=`az servicebus namespace list --query "[?tags.group=='FileTrust'].{namespace: name, resourceGroup: resourceGroup, area: tags.area}"`
        cd ./event_trigger/
        export PULUMI_SECRET_KEY=${{ secrets.PULUMI_SECRET_KEY }}
        pipenv install
        pulumi login --cloud-url azblob://pulumi
        pulumi config set cluster prod --non-interactive --stack $pulumi_stack_prod_name
        pulumi config set SB_LIST "$sbList" --non-interactive --stack $pulumi_stack_prod_name
        pipenv run pulumi up --non-interactive --yes --stack $pulumi_stack_prod_name

#    - name: Run Pulumi Destroy
#      run: |
#        cd ./event_trigger/
#        export PULUMI_SECRET_KEY=${{ secrets.PULUMI_SECRET_KEY }}
#        pipenv install
#        pulumi login --cloud-url azblob://pulumi
#        pipenv run pulumi destroy --non-interactive --yes --stack sre-deadletter-watcher-${{ github.event.inputs.stack}}

